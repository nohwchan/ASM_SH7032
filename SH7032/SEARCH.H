;********************************************
;-----COMPARE CURRENT FOR SEARCH SPEED -----*
;********************************************
;FLYINGA
MOV PSTATUS7,R1
MOV.B @R1,R0
TST #B'100000,R0
BT  SEARCH_NORM
BRA OUT_SEARCH
NOP
SEARCH_NORM:
;SSL_FLY---------BEGIN-----------------------------------
	MOV SYSFLG11,R1
	ADD #1,R1
	MOV.B @R1,R0
	TST #B'100,R0		;IF SSL 
	BT  CHECK_CON		;THEN CHECK CONTINUE
	BRA VF_SEARCH		;ELSE VF_SEARCH
	NOP
CHECK_CON:
	MOV VSTATUS1,R1
	MOV.B @R1,R0
	TST #B'1000000,R0	;IF WEIGHTING FLG NOT SET
	BF  INC_FLUX		;THEN NOT INCREASE FLUX
	BRA NOT_INC_FLUX
	NOP
INC_FLUX:
	MOV INC_TIME,R3		
	MOV.W @R3,R4
	MOV P10000,R2
	CMP/GE R2,R4		;IF WEIGHTED VOLT < 100 %
	BF  NOT_100		;THEN NOT_100

	AND #B'10111111,R0	;ELSE CLEAR WEIGHTING FLG
	MOV.B R0,@R1	
        MOV WSTATUS,R1
	MOV.B @R1,R0
	TST #B'1,R0		;IF FN-22 IS SELECT
	BF  NOT_AUTO_RE1	;THEN NOT CLEAR FLG
	MOV VSTATUS1,R1		;ELSE CLEAR FLG.
	MOV.B @R1,R0
	AND #B'11101111,R0
	MOV.B R0,@R1
NOT_AUTO_RE1:
        MOV P2000,R4
	MOV.W R4,@R3		;SET INITIAL INC_TIME = 20%
	MOV FBACK1,R3
	MOV.W @R3,R4
	MOV FLAST4,R3
	MOV.W R4,@R3		;STORE BACK UP FLAST TO FLAST
	MOV WSTATUS,R1
	MOV.B @R1,R0
	AND #B'11110111,R0
	MOV.B R0,@R1
;SEQ_FLY1-----------------BEGIN------------------------------
	MOV XSTATUS1,R1
	MOV.B @R1,R0
	OR  #B'1,R0		
	MOV.B R0,@R1
;SEQ_FLY1-------------------END------------------------------
        BRA OUT_SEARCH
	NOP
NOT_100:
	MOV V_STEP,R2
	MOV.W @R2,R2
	ADD R2,R4		;INCREASE WEIGHT EVERY 1%
	MOV.W R4,@R3
;VT_FLY----------------BEGIN----------------------------
	MOV SYSFLG11,R1
	ADD #1,R1
	MOV.B @R1,R0
	TST #B'10,R0		;IF SSL 
	BF  SENSORLESS		;THEN CHECK CONTINUE
	MOV WM_REAL1,R1
	MOV @R1,R0
	BRA CHECK_DIRECTION
	NOP
SENSORLESS:
;VT_FLY-----------------END-----------------------------
        MOV WM_EST1,R1
	MOV @R1,R0
CHECK_DIRECTION:                ;VT_FLY
MOV R0,R2
SHAL R2				;IF WM_EST POSITIVE
BF POSITIVE1			;THEN POSITIVE1
NEG R0,R0			;NEGATIVE WM_EST
POSITIVE1:
	SHAR R0			;R0=WM_EST THAT WANT TO CONVERT
	SHAR R0
	SHAR R0
	MOV K2048,R2
	MOV POLE1,R1
	MOV.B @R1,R1
	MULS R2,R1
	STS MACL,R1
	MULS R0,R1
	STS MACL,R2
	SHAL R2
	MOV K4118,R0
	DIVSN R0,R2		;R2=FREQUENCY(Hz) THAT CONVERT FROM WM_EST
;VT_FLY------------------BEGIN--------------------------------------------
	MOV SYSFLG11,R1
	ADD #1,R1
	MOV.B @R1,R0
	TST #B'10,R0		;IF SSL 
	BF  SENSORLESS1		;THEN CHECK CONTINUE
	MOV #100,R1
	CMP/GT R1,R2
	BT  OVER50
	MOV #10,R2
	BRA OVER50
	NOP	
SENSORLESS1:	
;VT_FLY-------------------END---------------------------------------------
;MOV #50,R1
MOV HZ500,R1
CMP/GT R1,R2			;IF FREQUENCY > 0.5 Hz
BT  OVER50			;THEN OVER50
MOV #50,R2
;MOV R1,R2			;ELSE MOV 0.5Hz TO FREQUENCY
OVER50:
	MOV FRUN4,R1
	MOV.W R2,@R1		;STORE CONVERT FREQ TO FRUN
	MOV FLAST4,R1
	MOV.W R2,@R1 		;STORE CONVERT FREQ TO FLAST

	BRA OUT_SEARCH
	NOP

NOT_INC_FLUX:

	MOV VSTATUS1,R1
	MOV.B @R1,R0
	TST #B'100000,R0	;IF SEARCHING SPEED FLG NOT SET
	BF  SSL_SEARCH1		;THEN OUT_SEARCH
	BRA OUT_SEARCH
	NOP
SSL_SEARCH1:	
	MOV S_COUNT,R1
	MOV.W @R1,R0
	MOV D_TIME,R2
	MOV.W @R2,R2
	CMP/GE R2,R0		;IF S_COUNT GE 10 ms.(BECAUSE FIRST 1ms. IRMS=0)
	BT  SSL_SEARCH2		;THEN START SEARCH(COMPARE CURRENT)
	ADD #1,R0		;ELSE INCREASE S_COUNT
	MOV.W R0,@R1		;AND NOT SEARCH(COMPARE CURRENT)
	BRA OUT_SEARCH		
	NOP
SSL_SEARCH2:
;VT_FLY-------------------BEGIN-----------------------
	MOV SYSFLG11,R1
	ADD #1,R1
	MOV.B @R1,R0
	TST #B'10,R0		;IF SSL 
	BT  WM_MATCH		;THEN CHECK CONTINUE
;VT_FLY---------------------END-----------------------
;CORRECT2------------------BEGIN----------------------
;MOV WSTATUS,R1
;MOV.B @R1,R0
;TST #B'10000000,R0
;BF  WM_MATCH
;CORRECT2-------------------END-----------------------
MOV IMOTOR2,R0          ;ELSE COARSE SEARCH CONTINUE
MOV @R0,R0
MOV LEVEL_I,R1
MOV.W @R1,R1
MULS R0,R1
STS MACL,R2
MOV I500,R1
DIVS R1,R2              ;R0=LEVEL*0.2*IMOTOR(RATED)

MOV FIL_AMP,R1
MOV @R1,R0
;MOV #50,R2
CMP/GT R2,R0                    ;IF FIL_AMP </= 50+BAND
BF  WM_MATCH			;THEN WM_MATCH (CHECK DELAY TIME CONTINUE)
;MOV #0,R0
;MOV COUNT_UP,R1
;MOV.W R0,@R1
BRA OUT_SEARCH
NOP  
WM_MATCH:	
	MOV COUNT_UP,R1
	MOV.W @R1,R0
;	MOV W1000,R2
	MOV T_TIME,R2
	MOV.W @R2,R2
	CMP/GE R2,R0		;IF COUNT_UP >/= TIME DELAY
	BT  WM_MATCH1		;THEN WM_MATCH1 (INCREASE FLUX)
	ADD #1,R0		;ELSE ADD TIME CONTINUE
	MOV.W R0,@R1
	BRA OUT_SEARCH
	NOP	
WM_MATCH1:
;	MOV WM_EST1,R1
;	MOV @R1,R0
;MOV R0,R2
;SHAL R2				;IF WM_EST POSITIVE
;BF POSITIVE1			;THEN POSITIVE1
;NEG R0,R0			;NEGATIVE WM_EST
;POSITIVE1:
;	SHAR R0			;R0=WM_EST THAT WANT TO CONVERT
;	SHAR R0
;	SHAR R0
;	MOV K2048,R2
;	MOV POLE1,R1
;	MOV.B @R1,R1
;	MULS R2,R1
;	STS MACL,R1
;	MULS R0,R1
;	STS MACL,R2
;	SHAL R2
;	MOV K4118,R0
;	DIVSN R0,R2		;R2=FREQUENCY(Hz) THAT CONVERT FROM WM_EST
;;MOV #50,R1
;MOV HZ500,R1
;CMP/GT R1,R2			;IF FREQUENCY > 0.5 Hz
;BT  OVER50			;THEN OVER50
;MOV #50,R2
;;MOV R1,R2			;ELSE MOV 0.5Hz TO FREQUENCY
;OVER50:
;	MOV FRUN4,R1
;	MOV.W R2,@R1		;STORE CONVERT FREQ TO FRUN
;	MOV FLAST4,R1
;	MOV.W R2,@R1 		;STORE CONVERT FREQ TO FLAST

	MOV VSTATUS1,R1
	MOV.B @R1,R0
	AND #B'11011111,R0
	OR  #B'1000000,R0	;SET WEIGHTING VOLT FLG.
	MOV.B R0,@R1
	MOV S_COUNT,R1
	MOV #0,R0		;CLEAR S_COUNT
	MOV.W R0,@R1
	MOV COUNT_UP,R1
	MOV.W R0,@R1		;CLEAR COUNT_UP
	MOV INC_TIME,R1
	MOV P2000,R0
	MOV.W R0,@R1		;SET INITIAL INC_TIME FOR INCREASE FLUX
BRA OUT_SEARCH
NOP	
VF_SEARCH:
;SSL_FLY----------END------------------------------------
NOT_TRANSFER:
        MOV VSTATUS1,R1
	MOV.B @R1,R0
	TST #B'1000000,R0	;IF WEIGHTING FLG NOT SET
	BT  NOT_WEIGHT		;THEN NOT WEIGHT
	MOV WEIGHT,R3		
	MOV.W @R3,R4
	MOV Q30000,R2
	CMP/GE R2,R4		;IF WEIGHTED VOLT < 100 %
	BF  NOT_FULL		;THEN NOT_FULL
	AND #B'10111111,R0	;ELSE CLEAR WEIGHTING FLG
	MOV.B R0,@R1	
        MOV WSTATUS,R1
	MOV.B @R1,R0
	TST #B'1,R0		;IF FN-22 IS SELECT
	BF  NOT_AUTO_RE		;THEN NOT CLEAR FLG
	MOV VSTATUS1,R1		;ELSE CLEAR FLG.
	MOV.B @R1,R0
	AND #B'11101111,R0
	MOV.B R0,@R1
NOT_AUTO_RE:
        MOV W3000,R4
	MOV.W R4,@R3		;SET INITIAL WEIGHT = 10%

	MOV WSTATUS,R1
	MOV.B @R1,R0
	TST #B'100,R0		;IF USE MIX_METHOD SEARCH
	BT  PURE_SSL
	MOV CLOCK,R3		;THEN SET INITIAL CLOCK & TRANSFER FLG.(MIX_MODE)
	MOV #0,R4		;SET INITIAL CLOCK = 0 s.
	MOV R4,@R3
	MOV VSTATUS1,R1
	MOV.B @R1,R0
	OR  #B'10000000,R0	;SET TRANSFER FROM V/F TO SSL FLG.
	MOV.B R0,@R1
	BRA OUT_SEARCH		;THEN OUT_SEARCH(NOT STORE BACKUP FLAST)
	NOP
PURE_SSL:		

	MOV FBACK1,R3
	MOV.W @R3,R4
	MOV FLAST4,R3
	MOV.W R4,@R3		;STORE BACK UP FLAST TO FLAST
;FLYINGA
MOV WSTATUS,R1
MOV.B @R1,R0
AND #B'11110111,R0
MOV.B R0,@R1
;FLYINGA
;SEQ_FLY1-----------------BEGIN------------------------------
	MOV XSTATUS1,R1
	MOV.B @R1,R0
	OR  #B'1,R0		
	MOV.B R0,@R1
;SEQ_FLY1-------------------END------------------------------
        BRA OUT_SEARCH
	NOP
NOT_FULL:
	MOV V_STEP,R2
	MOV.W @R2,R2
	ADD R2,R4		;INCREASE WEIGHT EVERY 1%
	MOV.W R4,@R3
	BRA OUT_SEARCH
	NOP
NOT_WEIGHT:

	MOV VSTATUS1,R1
	MOV.B @R1,R0
	TST #B'100000,R0	;IF SEARCHING SPEED FLG NOT SET
	BF  CHECK_DELAY		;THEN OUT_SEARCH
	BRA OUT_SEARCH
	NOP
CHECK_DELAY:	
	MOV S_COUNT,R1
	MOV.W @R1,R0
	MOV D_TIME,R2
	MOV.W @R2,R2
	CMP/GE R2,R0		;IF S_COUNT GE 10 ms.(BECAUSE FIRST 1ms. IRMS=0)
	BT  STR_SEARCH		;THEN START SEARCH(COMPARE CURRENT)
	ADD #1,R0		;ELSE INCREASE S_COUNT
	MOV.W R0,@R1		;AND NOT SEARCH(COMPARE CURRENT)
	BRA OUT_SEARCH		
	NOP
STR_SEARCH:
;FAST1-----------------BEGIN-----------------------
MOV WSTATUS,R1
MOV.B @R1,R0
TST #B'10,R0
BT  STR_SEARCH2
;FAST2-------------------BEGIN----------------------
MOV T_COUNT,R1
MOV.W @R1,R0
MOV T_TIME,R2
MOV.W @R2,R2
CMP/GE R2,R0
BT  STR_SEARCH3
ADD #1,R0
MOV.W R0,@R1
BRA OUT_SEARCH
NOP
STR_SEARCH3:
;FAST2--------------------END-----------------------
;FAST1------------------END------------------------
        MOV S_TIMER,R1
	MOV.W @R1,R0
	MOV SEARCH_T,R2
	MOV.W @R2,R2
	CMP/GE R2,R0
	BT  STR_SEARCH1
	ADD #1,R0
	MOV.W R0,@R1
	BRA OUT_SEARCH
	NOP
STR_SEARCH1:
	MOV #0,R0
	MOV.W R0,@R1

	MOV WSTATUS,R1
	MOV.B @R1,R0
	TST #B'10,R0		;IF CURRENT < LEVEL
	BF  FINE_SEARCH		;THEN FINE SEARCH 

STR_SEARCH2:                    ;FAST1

        MOV IMOTOR2,R0          ;ELSE COARSE SEARCH CONTINUE
	MOV @R0,R0
	MOV LEVEL_I,R1
	MOV.W @R1,R1
	MULS R0,R1
	STS MACL,R0
	MOV I1000,R1
	DIVS R1,R0		;R0=0.5*0.1*IMOTOR(RATED)
;FAST1------------BEGIN----------------------------------------
       MOV IRMS2,R1
       MOV @R1,R1              ;R1=IRMS REAL
;MOV FIL_AMP,R1
;MOV @R1,R1
;FAST1-------------END-----------------------------------------
;IMPROVE5
;MOV #10,R2
;MULS R2,R1
;STS MACL,R1
;IMPROVE5
        CMP/GT R0,R1            ;IF RMS > 0.05*IMOTOR (ABOUT 10% OF NO LOAD CURRENT)
	BT  NOT_SYNC		;THEN SPEED NOT SYNC

	MOV WSTATUS,R1		;SET FLG FINE SEARCH
	MOV.B @R1,R0
	OR  #B'10,R0
	MOV.B R0,@R1
FINE_SEARCH:	
;IMPROVE5
;        MOV FIL_AMP,R1
;        MOV @R1,R1
;        MOV AMPBACK,R0
;        MOV @R0,R0
;        CMP/GT R0,R1
;        BF  NOT_SYNC
MOV FIL_AMP,R1
MOV @R1,R1
MOV IMIN2,R0
MOV @R0,R0
CMP/GE R0,R1
BF  STORE_IMIN
SUB R0,R1
MOV BAND,R0
MOV.W @R0,R0
;MOV #15,R0
CMP/GE R0,R1
BT SPEED_MATCH
;FAST1-------------------BEGIN----------------------------------
MOV VDC,R1
MOV @R1,R1
MOV V650,R0
CMP/GE R0,R1
BT  SPEED_MATCH
;FAST1--------------------END-----------------------------------
BRA NOT_SYNC
NOP
STORE_IMIN:
MOV IMIN2,R0
MOV R1,@R0
MOV FRUN4,R1
MOV.W @R1,R1

MOV FMIN,R0
MOV.W R1,@R0
BRA NOT_SYNC
NOP
;IMPROVE5
SPEED_MATCH:
;IMPROVE5
MOV FMIN,R1
MOV.W @R1,R0

;MOV SEARCH_T,R1
;MOV.W @R1,R1
;MOV K256,R2
;DIVS R1,R2
;ADD R2,R0

MOV FRUN4,R1
MOV.W R0,@R1
MOV FLAST4,R1
MOV.W R0,@R1
SPEED_MATCH1:
;IMPROVE5
;       MOV FBACK1,R1
;	MOV.W @R1,R0
;	MOV FLAST4,R1
;	MOV.W R0,@R1		;STORE BACK UP FLAST TO FLAST
	MOV VSTATUS1,R1
	MOV.B @R1,R0
	AND #B'11011111,R0	;CLEAR SEACHING SPEED FLG.
	OR  #B'1000000,R0	;SET WEIGHTING VOLT FLG.
	MOV.B R0,@R1
	MOV WSTATUS,R1
	MOV.B @R1,R0
	AND #B'11111101,R0
	MOV.B R0,@R1
	MOV S_COUNT,R1
	MOV #0,R0		;CLEAR S_COUNT
	MOV.W R0,@R1
;FAST2----------------------BEGIN-----------------------------
MOV T_COUNT,R1
MOV.W R0,@R1                    ;CLEAR T_COUNT
;FAST2-----------------------END------------------------------
;FAST1----------------------BEGIN-----------------------------
        MOV FLAST4,R1
        MOV.W @R1,R0
        CMP/EQ #50,R0
        BF  NOT_05HZ
        MOV Q30000,R0
        MOV WEIGHT,R1
	MOV.W R0,@R1		;SET INITIAL WEIGHTED OUTPUT VOLT
	BRA OUT_SEARCH
        NOP
NOT_05HZ:
;FAST1-----------------------END------------------------------
        MOV W3000,R0
        MOV WEIGHT,R1
        MOV.W R0,@R1            ;SET INITIAL WEIGHTED OUTPUT VOLT
	BRA OUT_SEARCH
	NOP
NOT_SYNC:	
;FAST1----------------------BEGIN----------------------------------
         MOV WSTATUS,R1
         MOV.B @R1,R0
         TST #B'10,R0
         BF  SLOW_FIND
;        MOV FLAST4,R1
;        MOV.W @R1,R0
;        MOV #50,R1
;        CMP/GT R1,R0            ;IF FLAST </=0.5HZ
;        BF  SPEED_MATCH1        ;THEN STR FROM 0.5 HZ(GOTO SPEED MATCH);IMPROVE5
;FAST1---------------------END-------------------------------------
        MOV FLAST4,R1
	MOV.W @R1,R0
;FAST1---------BEGIN------------------------------
	MOV STEP_FRE,R2
	MOV.W @R2,R2
	SUB R2,R0		
;	ADD #-1,R0		;DECREASE FLAST
;FAST1--------END---------------------------------
        MOV.W R0,@R1
	MOV FRUN4,R1
	MOV.W @R1,R0
;FAST1---------BEGIN-----------------------------
	SUB R2,R0
;	ADD #-1,R0		;DECREASE FRUN
;FAST1----------END------------------------------
        MOV.W R0,@R1
;FAST1----------BEGIN----------------------------
        BRA CHECK_RUN_FROM_0
        NOP

SLOW_FIND:
        MOV FLAST4,R1
        MOV.W @R1,R0
        ADD #-1,R0
        MOV.W R0,@R1
        MOV FRUN4,R1
        MOV.W @R1,R0
        ADD #-1,R0
        MOV.W R0,@R1
CHECK_RUN_FROM_0:

        MOV FLAST4,R1
	MOV.W @R1,R0
	MOV #50,R1
	CMP/GT R1,R0		;IF FLAST </=0.5HZ 
	BT  OUT_SEARCH
	MOV  FLAST4,R0
	MOV.W R1,@R0
	MOV  FRUN4,R0
	MOV.W R1,@R0		
	BRA  SPEED_MATCH1	;THEN STR FROM 0.5 HZ(GOTO SPEED MATCH);IMPROVE5
        NOP

;        BRA OUT_SEARCH
;        NOP
;FAST1-------------------END-------------------------------------

	.ALIGN 4
;MCSPEED:	.DATA.L MC_SPEED	;VARIABLE IN S.MAC
;MCLAST3:	.DATA.L MC_LAST		;VARIABLE IN S.MAC
SYSFLG11:	.DATA.L SYSFLG
IRMS2:		.DATA.L I_RMS
IMOTOR2:	.DATA.L I_MOTOR
FRUN4:		.DATA.L FRUN
FLAST4:		.DATA.L FLAST
FBACK1:		.DATA.L _FBACK
VSTATUS1:	.DATA.L _V_STATUS
WSTATUS:	.DATA.L _W_STATUS
PSTATUS7:	.DATA.L _P_STATUS
XSTATUS1:       .DATA.L _X_STATUS
INC_TIME:       .DATA.L _INC_TIME
P2000:		.DATA.L 2000
P10000:		.DATA.L 10000
WM_REAL1:	.DATA.L _WM
S_COUNT:	.DATA.L _S_COUNT	;COUNT TIME FOR STR SEARCH
FIL_AMP:	.DATA.L _FIL_AMP
WEIGHT:		.DATA.L _WEIGHT		;COUNT % OF WEIGHTED VOLT
CLOCK:		.DATA.L _CLOCK		;COUNT TIME FOR MIX_MODE
Q30000:		.DATA.L 30000		;100 % WEIGHT OF VOLT (FROM 10 % TO 100%) 
V500:		.DATA.L 3000		;DELAY TIME FOR START SEARCH (FOR DETECT CURRENT)
W3000:		.DATA.L 3000		;INITIAL OF WEIGHT VOLT(10%)
I1000:		.DATA.L 1000		;DIVIDER OF %NOLOAD CURRENT
V_STEP:		.DATA.L _V_STEP
D_TIME:		.DATA.L _D_TIME
LEVEL_I:	.DATA.L _LEVEL_I
S_TIMER:	.DATA.L _S_TIMER
SEARCH_T:	.DATA.L _SEARCH_T
AMPBACK:	.DATA.L _AMP_BACK
WM_EST1:	.DATA.L _WM_EST
MIX_TIME:	.DATA.L _MIX_TIME
IMIN2:          .DATA.L _IMIN
FMIN:           .DATA.L _FMIN
K256:           .DATA.L 256
BAND:           .DATA.L _BAND
VDC:            .DATA.L _V_DC
V650:           .DATA.L 3184
STEP_FRE:       .DATA.L _STEP_FRE
T_COUNT:        .DATA.L _T_COUNT
T_TIME:         .DATA.L _T_TIME
POLE1:		.DATA.L _POLE
K2048:		.DATA.L 2048
K4118:		.DATA.L 4118
HZ500:		.DATA.L 50
I500:		.DATA.L 500
COUNT_UP:	.DATA.L _COUNT_UP
        .ALIGN 4
OUT_SEARCH:
	
